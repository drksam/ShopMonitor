/*
 * ESP32 Multi-Function Node Firmware
 * For ESP32 DevKit V1 boards
 * 
 * Supports:
 * - Machine Monitor Mode (4 RFID readers)
 * - Office RFID Reader Mode (1 RFID reader)
 * - Accessory IO Controller Mode (Relay outputs and activity inputs)
 * 
 * Features:
 * - WiFi connectivity with fallback AP mode
 * - Web configuration interface
 * - OTA firmware updates
 * - mDNS discovery
 * - REST API for server communication
 * - Offline mode with local authorization
 */

#include <Arduino.h>
#include <SPI.h>
#include <MFRC522.h>
#include <WiFi.h>
#include <ESPmDNS.h>
#include <WiFiUdp.h>
#include <AsyncTCP.h>
#include <ESPAsyncWebServer.h>
#include <ArduinoJson.h>
#include <FastLED.h>
#include <NTPClient.h>
#include <EEPROM.h>
#include <Preferences.h>
#include <HTTPClient.h>
#include <Update.h>

// Include HTML content
#include "dashboard.h"
#include "wiring_diagram.h"

// Node Configuration
#define NODE_TYPE_MACHINE_MONITOR 0
#define NODE_TYPE_OFFICE_READER 1
#define NODE_TYPE_ACCESSORY_IO 2

// RFID Module Pins (SPI interface)
// MOSI, MISO, and SCK are fixed pins on ESP32
// MOSI: GPIO23, MISO: GPIO19, SCK: GPIO18
// Each RFID reader needs its own SS (chip select) pin
#define SS_PIN1 21 // RFID reader 1
#define SS_PIN2 17 // RFID reader 2
#define SS_PIN3 16 // RFID reader 3
#define SS_PIN4 4  // RFID reader 4
#define RST_PIN 22 // Shared RST pin for all RFID readers

// Relay control pins
#define RELAY1_PIN 13
#define RELAY2_PIN 12
#define RELAY3_PIN 14
#define RELAY4_PIN 27

// Activity sensor pins
#define ACTIVITY1_PIN 36
#define ACTIVITY2_PIN 39
#define ACTIVITY3_PIN 34
#define ACTIVITY4_PIN 35

// LED indicator pin
#define LED_PIN 5

// Feedback and control
#define BUZZER_PIN 15
#define BUTTON1_PIN 33
#define BUTTON2_PIN 32

// Configuration
bool isConfigured = false;
bool wifiConnected = false;
int nodeType = NODE_TYPE_MACHINE_MONITOR;
String nodeName = "NooyenNode";
String serverUrl = "http://server:5000";
String wifiSSID = "";
String wifiPassword = "";
String machineIDs[4] = {"", "", "", ""}; // Machine IDs for each zone
unsigned long lastActivityTime[4] = {0, 0, 0, 0};
int activityCounts[4] = {0, 0, 0, 0};
unsigned long lastReportTime = 0;
unsigned long lastActivityBroadcast = 0;
const unsigned long REPORT_INTERVAL = 600000; // 10 minutes
bool apMode = false;
unsigned long startTime = 0;

// RFID readers
MFRC522 rfidReaders[4] = {
  MFRC522(SS_PIN1, RST_PIN),
  MFRC522(SS_PIN2, RST_PIN),
  MFRC522(SS_PIN3, RST_PIN),
  MFRC522(SS_PIN4, RST_PIN)
};

// Active users
String currentTags[4] = {"", "", "", ""};

// Web server for configuration
AsyncWebServer webServer(80);

// Function declarations
void setupWiFi();
void setupMDNS();
void setupWebServer();
void handleStatus();
bool loadConfig();
bool saveConfig();
void resetConfig();
String getRfidUID(MFRC522 &reader);
void handleRFID();
void toggleRelay(int relayNum, bool state);
void checkActivity();
void reportActivity();
void notifyServer(int zone, String tag, bool login);
void factoryReset();
void blinkLED(int times, int delayMS);
bool authorizeTag(String tag, String machineID);

void setup() {
  Serial.begin(115200);
  Serial.println("\n\nStarting ESP32 Multi-Function Node...");
  
  startTime = millis();
  
  // Initialize EEPROM
  EEPROM.begin(512);
  
  // Initialize LED pin
  pinMode(LED_PIN, OUTPUT);
  digitalWrite(LED_PIN, LOW);
  
  // Initialize relay pins
  pinMode(RELAY1_PIN, OUTPUT);
  pinMode(RELAY2_PIN, OUTPUT);
  pinMode(RELAY3_PIN, OUTPUT);
  pinMode(RELAY4_PIN, OUTPUT);
  digitalWrite(RELAY1_PIN, LOW);
  digitalWrite(RELAY2_PIN, LOW);
  digitalWrite(RELAY3_PIN, LOW);
  digitalWrite(RELAY4_PIN, LOW);
  
  // Initialize activity sensor pins
  pinMode(ACTIVITY1_PIN, INPUT);
  pinMode(ACTIVITY2_PIN, INPUT);
  pinMode(ACTIVITY3_PIN, INPUT);
  pinMode(ACTIVITY4_PIN, INPUT);
  
  // Initialize buzzer
  pinMode(BUZZER_PIN, OUTPUT);
  digitalWrite(BUZZER_PIN, LOW);
  
  // Initialize buttons
  pinMode(BUTTON1_PIN, INPUT_PULLUP);
  pinMode(BUTTON2_PIN, INPUT_PULLUP);
  
  // Load configuration
  isConfigured = loadConfig();
  
  // Signal startup
  blinkLED(3, 200);
  
  // Initialize SPI bus for RFID readers
  SPI.begin();
  
  // Initialize RFID readers based on node type
  if (nodeType == NODE_TYPE_MACHINE_MONITOR) {
    for (int i = 0; i < 4; i++) {
      rfidReaders[i].PCD_Init();
      delay(50);
    }
  } else if (nodeType == NODE_TYPE_OFFICE_READER) {
    rfidReaders[0].PCD_Init();
  }
  
  // Setup WiFi connection
  setupWiFi();
  
  // Setup mDNS
  setupMDNS();
  
  // Setup web server
  setupWebServer();
  
  Serial.println("Setup complete!");
  Serial.print("Node Type: ");
  Serial.println(nodeType == NODE_TYPE_MACHINE_MONITOR ? "Machine Monitor" : 
                nodeType == NODE_TYPE_OFFICE_READER ? "Office RFID Reader" : "Accessory IO Controller");
  Serial.print("Node Name: ");
  Serial.println(nodeName);
  
  // Signal ready
  blinkLED(5, 100);
}

void loop() {
  // Check WiFi connection
  if (WiFi.status() != WL_CONNECTED && !apMode) {
    wifiConnected = false;
    if (millis() - lastReportTime > 30000) { // Check every 30 seconds
      Serial.println("WiFi connection lost, attempting to reconnect...");
      WiFi.reconnect();
      lastReportTime = millis();
    }
  } else if (!apMode) {
    wifiConnected = true;
  }
  
  // Handle RFID readers
  if (nodeType == NODE_TYPE_MACHINE_MONITOR || nodeType == NODE_TYPE_OFFICE_READER) {
    handleRFID();
  }
  
  // Check activity sensors
  if (nodeType == NODE_TYPE_MACHINE_MONITOR || nodeType == NODE_TYPE_ACCESSORY_IO) {
    checkActivity();
  }
  
  // Report activity periodically
  if (millis() - lastReportTime > REPORT_INTERVAL) {
    if (wifiConnected) {
      reportActivity();
    }
    lastReportTime = millis();
  }
  
  // Check for factory reset (both buttons pressed for 5 seconds)
  if (digitalRead(BUTTON1_PIN) == LOW && digitalRead(BUTTON2_PIN) == LOW) {
    static unsigned long buttonTime = 0;
    if (buttonTime == 0) {
      buttonTime = millis();
    } else if (millis() - buttonTime > 5000) {
      Serial.println("Factory reset triggered by buttons...");
      factoryReset();
      buttonTime = 0;
    }
  } else {
    static unsigned long buttonTime = 0;
  }
  
  delay(50); // Small delay to prevent CPU overload
}

void setupWiFi() {
  if (isConfigured && wifiSSID.length() > 0) {
    // Connect to WiFi
    Serial.println("Connecting to WiFi...");
    WiFi.mode(WIFI_STA);
    WiFi.begin(wifiSSID.c_str(), wifiPassword.c_str());
    
    // Wait for connection (with timeout)
    int timeout = 0;
    while (WiFi.status() != WL_CONNECTED && timeout < 20) {
      delay(500);
      Serial.print(".");
      timeout++;
    }
    
    if (WiFi.status() == WL_CONNECTED) {
      wifiConnected = true;
      Serial.println("\nWiFi connected.");
      Serial.print("IP address: ");
      Serial.println(WiFi.localIP());
    } else {
      wifiConnected = false;
      Serial.println("\nWiFi connection failed. Starting AP mode...");
      startAPMode();
    }
  } else {
    Serial.println("No WiFi configuration found. Starting AP mode...");
    startAPMode();
  }
}

void startAPMode() {
  // Start AP mode
  apMode = true;
  WiFi.mode(WIFI_AP);
  String apName = "NooyenNode_" + String((uint32_t)ESP.getEfuseMac(), HEX);
  WiFi.softAP(apName.c_str(), "nooyen123");
  Serial.println("AP Mode started.");
  Serial.print("AP SSID: ");
  Serial.println(apName);
  Serial.print("AP IP address: ");
  Serial.println(WiFi.softAPIP());
}

void setupMDNS() {
  if (wifiConnected) {
    // Set up mDNS responder
    String mdnsName = nodeName;
    mdnsName.replace(" ", "-");
    if (MDNS.begin(mdnsName.c_str())) {
      Serial.println("mDNS responder started");
      Serial.print("mDNS name: ");
      Serial.println(mdnsName);
      
      // Add service to mDNS
      MDNS.addService("http", "tcp", 80);
      MDNS.addService("nooyen", "tcp", 80);
    } else {
      Serial.println("Error setting up mDNS responder!");
    }
  }
}

void setupWebServer() {
  // Setup web server routes
  webServer.on("/", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send(200, "text/html", dashboard_html);
  });
  
  webServer.on("/wiring", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send(200, "text/html", wiring_diagram_html);
  });
  
  webServer.on("/api/status", HTTP_GET, [](AsyncWebServerRequest *request){
    handleStatus();
    String status = "{";
    status += "\"node_id\":\"" + nodeName + "\",";
    status += "\"node_type\":" + String(nodeType) + ",";
    status += "\"ip_address\":\"" + (wifiConnected ? WiFi.localIP().toString() : WiFi.softAPIP().toString()) + "\",";
    status += "\"wifi_signal\":" + String(WiFi.RSSI()) + ",";
    status += "\"uptime\":" + String(millis() / 1000) + ",";
    status += "\"server_connected\":" + String(wifiConnected ? "true" : "false");
    
    // Add node-type specific data
    if (nodeType == NODE_TYPE_MACHINE_MONITOR) {
      status += ",\"machines\":[";
      for (int i = 0; i < 4; i++) {
        if (i > 0) status += ",";
        status += "{";
        status += "\"machine_id\":\"" + machineIDs[i] + "\",";
        status += "\"status\":\"" + String(currentTags[i] != "" ? "active" : "idle") + "\",";
        status += "\"rfid\":\"" + currentTags[i] + "\",";
        status += "\"activity_count\":" + String(activityCounts[i]);
        status += "}";
      }
      status += "]";
    } else if (nodeType == NODE_TYPE_OFFICE_READER) {
      status += ",\"last_tag\":\"" + currentTags[0] + "\"";
      status += ",\"scan_time\":" + String(lastActivityTime[0]);
    } else if (nodeType == NODE_TYPE_ACCESSORY_IO) {
      status += ",\"inputs\":[";
      for (int i = 0; i < 4; i++) {
        if (i > 0) status += ",";
        status += digitalRead(ACTIVITY1_PIN + i) == HIGH ? "true" : "false";
      }
      status += "],\"outputs\":[";
      for (int i = 0; i < 4; i++) {
        if (i > 0) status += ",";
        status += digitalRead(RELAY1_PIN + i) == HIGH ? "true" : "false";
      }
      status += "]";
    }
    
    status += "}";
    request->send(200, "application/json", status);
  });
  
  webServer.on("/api/config", HTTP_GET, [](AsyncWebServerRequest *request){
    String config = "{";
    config += "\"nodeName\":\"" + nodeName + "\",";
    config += "\"nodeType\":" + String(nodeType) + ",";
    config += "\"serverUrl\":\"" + serverUrl + "\",";
    config += "\"wifiSSID\":\"" + wifiSSID + "\",";
    config += "\"machine0\":\"" + machineIDs[0] + "\",";
    config += "\"machine1\":\"" + machineIDs[1] + "\",";
    config += "\"machine2\":\"" + machineIDs[2] + "\",";
    config += "\"machine3\":\"" + machineIDs[3] + "\"";
    config += "}";
    request->send(200, "application/json", config);
  });
  
  webServer.on("/api/config", HTTP_POST, [](AsyncWebServerRequest *request){
    // This is just a placeholder, we can't handle POST body in this function
    request->send(200);
  }, NULL, [](AsyncWebServerRequest *request, uint8_t *data, size_t len, size_t index, size_t total){
    String json = String((char*)data);
    
    DynamicJsonDocument doc(1024);
    DeserializationError error = deserializeJson(doc, json);
    
    if (error) {
      request->send(400, "application/json", "{\"success\":false,\"message\":\"Invalid JSON\"}");
      return;
    }
    
    // Update configuration
    if (doc.containsKey("nodeName")) nodeName = doc["nodeName"].as<String>();
    if (doc.containsKey("nodeType")) nodeType = doc["nodeType"].as<int>();
    if (doc.containsKey("serverUrl")) serverUrl = doc["serverUrl"].as<String>();
    if (doc.containsKey("wifiSSID")) wifiSSID = doc["wifiSSID"].as<String>();
    if (doc.containsKey("wifiPass")) wifiPassword = doc["wifiPass"].as<String>();
    if (doc.containsKey("machine0")) machineIDs[0] = doc["machine0"].as<String>();
    if (doc.containsKey("machine1")) machineIDs[1] = doc["machine1"].as<String>();
    if (doc.containsKey("machine2")) machineIDs[2] = doc["machine2"].as<String>();
    if (doc.containsKey("machine3")) machineIDs[3] = doc["machine3"].as<String>();
    
    // Save configuration
    if (saveConfig()) {
      request->send(200, "application/json", "{\"success\":true,\"message\":\"Configuration saved\"}");
    } else {
      request->send(500, "application/json", "{\"success\":false,\"message\":\"Failed to save configuration\"}");
    }
  });
  
  webServer.on("/api/reboot", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send(200, "text/plain", "Rebooting...");
    delay(500);
    ESP.restart();
  });
  
  webServer.on("/api/reset", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send(200, "text/plain", "Resetting to factory defaults...");
    delay(500);
    factoryReset();
  });
  
  webServer.on("/api/relay", HTTP_GET, [](AsyncWebServerRequest *request){
    if (nodeType != NODE_TYPE_ACCESSORY_IO) {
      request->send(400, "application/json", "{\"success\":false,\"message\":\"Not an Accessory IO node\"}");
      return;
    }
    
    if (request->hasParam("relay") && request->hasParam("state")) {
      int relay = request->getParam("relay")->value().toInt();
      bool state = request->getParam("state")->value().toInt() == 1;
      
      if (relay >= 1 && relay <= 4) {
        toggleRelay(relay, state);
        request->send(200, "application/json", "{\"success\":true,\"message\":\"Relay " + String(relay) + " set to " + String(state ? "ON" : "OFF") + "\"}");
      } else {
        request->send(400, "application/json", "{\"success\":false,\"message\":\"Invalid relay number\"}");
      }
    } else {
      request->send(400, "application/json", "{\"success\":false,\"message\":\"Missing parameters\"}");
    }
  });
  
  webServer.on("/api/scan_wifi", HTTP_GET, [](AsyncWebServerRequest *request){
    Serial.println("Scanning WiFi networks...");
    int networksFound = WiFi.scanNetworks();
    
    String json = "{";
    json += "\"success\":" + String(networksFound >= 0 ? "true" : "false") + ",";
    
    if (networksFound >= 0) {
      json += "\"networks\":[";
      
      for (int i = 0; i < networksFound; i++) {
        if (i > 0) json += ",";
        json += "{";
        json += "\"ssid\":\"" + WiFi.SSID(i) + "\",";
        json += "\"rssi\":" + String(WiFi.RSSI(i)) + ",";
        json += "\"encrypted\":" + String(WiFi.encryptionType(i) != WIFI_AUTH_OPEN ? "true" : "false");
        json += "}";
      }
      
      json += "],";
      json += "\"count\":" + String(networksFound);
    } else {
      json += "\"message\":\"Failed to scan networks\"";
    }
    
    json += "}";
    request->send(200, "application/json", json);
    
    // Clean up scan results
    WiFi.scanDelete();
  });
  
  // Start web server
  webServer.begin();
  Serial.println("Web server started");
}

void handleStatus() {
  // Just placeholder implementation - actual implementation in web route callbacks
}

bool loadConfig() {
  // Load configuration from EEPROM
  Preferences preferences;
  preferences.begin("nooyenNode", false);
  
  if (preferences.isKey("configured")) {
    nodeName = preferences.getString("nodeName", "NooyenNode");
    nodeType = preferences.getInt("nodeType", NODE_TYPE_MACHINE_MONITOR);
    serverUrl = preferences.getString("serverUrl", "http://server:5000");
    wifiSSID = preferences.getString("wifiSSID", "");
    wifiPassword = preferences.getString("wifiPass", "");
    
    for (int i = 0; i < 4; i++) {
      String key = "machine" + String(i);
      machineIDs[i] = preferences.getString(key.c_str(), "");
    }
    
    preferences.end();
    return true;
  }
  
  preferences.end();
  return false;
}

bool saveConfig() {
  // Save configuration to EEPROM
  Preferences preferences;
  preferences.begin("nooyenNode", false);
  
  preferences.putBool("configured", true);
  preferences.putString("nodeName", nodeName);
  preferences.putInt("nodeType", nodeType);
  preferences.putString("serverUrl", serverUrl);
  preferences.putString("wifiSSID", wifiSSID);
  preferences.putString("wifiPass", wifiPassword);
  
  for (int i = 0; i < 4; i++) {
    String key = "machine" + String(i);
    preferences.putString(key.c_str(), machineIDs[i]);
  }
  
  preferences.end();
  return true;
}

void resetConfig() {
  // Reset configuration to defaults
  Preferences preferences;
  preferences.begin("nooyenNode", false);
  preferences.clear();
  preferences.end();
  
  nodeName = "NooyenNode";
  nodeType = NODE_TYPE_MACHINE_MONITOR;
  serverUrl = "http://server:5000";
  wifiSSID = "";
  wifiPassword = "";
  
  for (int i = 0; i < 4; i++) {
    machineIDs[i] = "";
    currentTags[i] = "";
    activityCounts[i] = 0;
  }
  
  isConfigured = false;
}

String getRfidUID(MFRC522 &reader) {
  String uid = "";
  for (byte i = 0; i < reader.uid.size; i++) {
    if (reader.uid.uidByte[i] < 0x10) uid += "0";
    uid += String(reader.uid.uidByte[i], HEX);
  }
  uid.toUpperCase();
  return uid;
}

void handleRFID() {
  // Number of readers to check based on node type
  int readersToCheck = (nodeType == NODE_TYPE_MACHINE_MONITOR) ? 4 : 1;
  
  for (int i = 0; i < readersToCheck; i++) {
    // Reset the RFID reader
    rfidReaders[i].PCD_Init();
    
    // Look for a card
    if (rfidReaders[i].PICC_IsNewCardPresent() && rfidReaders[i].PICC_ReadCardSerial()) {
      String uid = getRfidUID(rfidReaders[i]);
      Serial.print("RFID tag detected on reader ");
      Serial.print(i);
      Serial.print(": ");
      Serial.println(uid);
      
      // Beep to indicate tag read
      digitalWrite(BUZZER_PIN, HIGH);
      delay(50);
      digitalWrite(BUZZER_PIN, LOW);
      
      // If currently no user is using this machine
      if (currentTags[i] == "") {
        // Check authorization
        if (authorizeTag(uid, machineIDs[i])) {
          // Activate the machine (turn on relay)
          if (nodeType == NODE_TYPE_MACHINE_MONITOR) {
            toggleRelay(i + 1, true);
            digitalWrite(LED_PIN, HIGH);
          }
          
          // Record the current user
          currentTags[i] = uid;
          lastActivityTime[i] = millis();
          
          // Notify server about login
          if (wifiConnected) {
            notifyServer(i, uid, true);
          }
          
          // Indicate successful login
          digitalWrite(BUZZER_PIN, HIGH);
          delay(100);
          digitalWrite(BUZZER_PIN, LOW);
          delay(100);
          digitalWrite(BUZZER_PIN, HIGH);
          delay(100);
          digitalWrite(BUZZER_PIN, LOW);
        } else {
          // Authorization failed
          digitalWrite(BUZZER_PIN, HIGH);
          delay(500);
          digitalWrite(BUZZER_PIN, LOW);
        }
      } else if (currentTags[i] == uid) {
        // User is logging out
        if (nodeType == NODE_TYPE_MACHINE_MONITOR) {
          toggleRelay(i + 1, false);
          digitalWrite(LED_PIN, LOW);
        }
        
        // Notify server about logout
        if (wifiConnected) {
          notifyServer(i, uid, false);
        }
        
        currentTags[i] = "";
        
        // Indicate successful logout
        digitalWrite(BUZZER_PIN, HIGH);
        delay(300);
        digitalWrite(BUZZER_PIN, LOW);
      } else {
        // Different user while machine is in use
        digitalWrite(BUZZER_PIN, HIGH);
        delay(500);
        digitalWrite(BUZZER_PIN, LOW);
      }
      
      // Halt PICC
      rfidReaders[i].PICC_HaltA();
      // Stop encryption on PCD
      rfidReaders[i].PCD_StopCrypto1();
    }
  }
}

void toggleRelay(int relayNum, bool state) {
  switch (relayNum) {
    case 1:
      digitalWrite(RELAY1_PIN, state ? HIGH : LOW);
      break;
    case 2:
      digitalWrite(RELAY2_PIN, state ? HIGH : LOW);
      break;
    case 3:
      digitalWrite(RELAY3_PIN, state ? HIGH : LOW);
      break;
    case 4:
      digitalWrite(RELAY4_PIN, state ? HIGH : LOW);
      break;
  }
  
  // Log relay action
  Serial.print("Relay ");
  Serial.print(relayNum);
  Serial.print(" set to ");
  Serial.println(state ? "ON" : "OFF");
}

void checkActivity() {
  // Check activity pins
  for (int i = 0; i < 4; i++) {
    // Skip check if no user is active
    if (currentTags[i] == "" && nodeType == NODE_TYPE_MACHINE_MONITOR) {
      continue;
    }
    
    // Read activity pin
    int activityPin;
    switch (i) {
      case 0: activityPin = ACTIVITY1_PIN; break;
      case 1: activityPin = ACTIVITY2_PIN; break;
      case 2: activityPin = ACTIVITY3_PIN; break;
      case 3: activityPin = ACTIVITY4_PIN; break;
    }
    
    // Update activity count if pin is HIGH and debounce
    if (digitalRead(activityPin) == HIGH) {
      if (millis() - lastActivityTime[i] > 1000) { // Debounce 1 second
        activityCounts[i]++;
        lastActivityTime[i] = millis();
        
        // Log activity
        Serial.print("Activity detected on pin ");
        Serial.print(activityPin);
        Serial.print(" (zone ");
        Serial.print(i);
        Serial.println(")");
      }
    }
  }
}

void reportActivity() {
  if (!wifiConnected) return;
  
  Serial.println("Reporting activity to server...");
  
  // Construct report data
  DynamicJsonDocument doc(1024);
  doc["node_id"] = nodeName;
  doc["node_type"] = nodeType;
  
  JsonArray machineData = doc.createNestedArray("machines");
  for (int i = 0; i < 4; i++) {
    if (machineIDs[i].length() > 0) {
      JsonObject machine = machineData.createNestedObject();
      machine["machine_id"] = machineIDs[i];
      machine["activity_count"] = activityCounts[i];
      machine["status"] = currentTags[i] != "" ? "active" : "idle";
      machine["rfid"] = currentTags[i];
    }
  }
  
  // Send report to server
  String reportUrl = serverUrl + "/api/activity";
  String payload;
  serializeJson(doc, payload);
  
  HTTPClient http;
  http.begin(reportUrl);
  http.addHeader("Content-Type", "application/json");
  
  int httpCode = http.POST(payload);
  Serial.print("HTTP Response: ");
  Serial.println(httpCode);
  
  if (httpCode == 200) {
    // Reset activity counts after successful report
    for (int i = 0; i < 4; i++) {
      activityCounts[i] = 0;
    }
  }
  
  http.end();
}

void notifyServer(int zone, String tag, bool login) {
  if (!wifiConnected) return;
  
  Serial.print(login ? "Login" : "Logout");
  Serial.print(" notification for zone ");
  Serial.print(zone);
  Serial.print(", tag ");
  Serial.println(tag);
  
  // Construct notification data
  DynamicJsonDocument doc(512);
  doc["node_id"] = nodeName;
  doc["machine_id"] = machineIDs[zone];
  doc["rfid"] = tag;
  doc["action"] = login ? "login" : "logout";
  doc["timestamp"] = millis();
  doc["activity_count"] = activityCounts[zone];
  
  // Send notification to server
  String notifyUrl = serverUrl + "/api/rfid";
  String payload;
  serializeJson(doc, payload);
  
  HTTPClient http;
  http.begin(notifyUrl);
  http.addHeader("Content-Type", "application/json");
  
  int httpCode = http.POST(payload);
  Serial.print("HTTP Response: ");
  Serial.println(httpCode);
  
  http.end();
  
  // Reset activity count after logout
  if (!login) {
    activityCounts[zone] = 0;
  }
}

void factoryReset() {
  Serial.println("Performing factory reset...");
  
  // Reset configuration
  resetConfig();
  
  // Reset hardware
  for (int i = 1; i <= 4; i++) {
    toggleRelay(i, false);
  }
  
  // Signal reset complete
  for (int i = 0; i < 10; i++) {
    digitalWrite(LED_PIN, !digitalRead(LED_PIN));
    digitalWrite(BUZZER_PIN, !digitalRead(BUZZER_PIN));
    delay(100);
  }
  digitalWrite(LED_PIN, LOW);
  digitalWrite(BUZZER_PIN, LOW);
  
  // Restart
  ESP.restart();
}

void blinkLED(int times, int delayMS) {
  for (int i = 0; i < times; i++) {
    digitalWrite(LED_PIN, HIGH);
    delay(delayMS);
    digitalWrite(LED_PIN, LOW);
    delay(delayMS);
  }
}

bool authorizeTag(String tag, String machineID) {
  // In actual implementation, this would check against a stored list
  // or connect to the server to authorize the tag for this machine
  // For this example, always return true in development
  return true;
}